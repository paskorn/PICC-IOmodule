D G "__PCM__" 0 747 ""4.132""
D G "__DEVICE__" 0 747 "886"
D G "__DATE__" 0 747 ""31-¾.¤.-12""
D G "__TIME__" 0 747 ""00:40:35"" "*--"
C G "" 0 8 1 "*"
C G "" 0 9 5 "*"
C G "" 0 15 2 "*"
C G "" 0 17 2 "*"
C G "" 0 19 2 "*"
C G "" 0 21 5 "*"
C G "" 0 28 2 "*"
C G "" 0 30 1 "*"
C G "" 0 31 2 "*"
C G "" 0 34 1 "*"
C G "" 0 35 2 "*"
C G "" 0 38 1 "*"
D G "DEBUG_ON" 0 43 "0" "1 = debug enabled -> will show error codes on the lcd screen"
d G "PIN_A0" 1 21 "40"
d G "PIN_A1" 1 22 "41"
d G "PIN_A2" 1 23 "42"
d G "PIN_A3" 1 24 "43"
d G "PIN_A4" 1 25 "44"
d G "PIN_A5" 1 26 "45"
d G "PIN_A6" 1 27 "46"
d G "PIN_A7" 1 28 "47"
d G "PIN_B0" 1 30 "48"
d G "PIN_B1" 1 31 "49"
d G "PIN_B2" 1 32 "50"
d G "PIN_B3" 1 33 "51"
d G "PIN_B4" 1 34 "52"
d G "PIN_B5" 1 35 "53"
d G "PIN_B6" 1 36 "54"
d G "PIN_B7" 1 37 "55"
d G "PIN_C0" 1 39 "56"
d G "PIN_C1" 1 40 "57"
d G "PIN_C2" 1 41 "58"
d G "PIN_C3" 1 42 "59"
d G "PIN_C4" 1 43 "60"
d G "PIN_C5" 1 44 "61"
d G "PIN_C6" 1 45 "62"
d G "PIN_C7" 1 46 "63"
d G "PIN_E3" 1 48 "75"
d G "FALSE" 1 51 "0"
d G "TRUE" 1 52 "1"
d G "BYTE" 1 54 "int8"
d G "BOOLEAN" 1 55 "int1"
d G "getc" 1 57 "getch"
d G "fgetc" 1 58 "getch"
d G "getchar" 1 59 "getch"
d G "putc" 1 60 "putchar"
d G "fputc" 1 61 "putchar"
d G "fgets" 1 62 "gets"
d G "fputs" 1 63 "puts"
d G "WDT_FROM_SLEEP" 1 68 "3"
d G "WDT_TIMEOUT" 1 69 "11"
d G "MCLR_FROM_SLEEP" 1 70 "19"
d G "MCLR_FROM_RUN" 1 71 "27"
d G "NORMAL_POWER_UP" 1 72 "25"
d G "BROWNOUT_RESTART" 1 73 "26"
d G "T0_INTERNAL" 1 80 "0"
d G "T0_EXT_L_TO_H" 1 81 "32"
d G "T0_EXT_H_TO_L" 1 82 "48"
d G "T0_DIV_1" 1 84 "8"
d G "T0_DIV_2" 1 85 "0"
d G "T0_DIV_4" 1 86 "1"
d G "T0_DIV_8" 1 87 "2"
d G "T0_DIV_16" 1 88 "3"
d G "T0_DIV_32" 1 89 "4"
d G "T0_DIV_64" 1 90 "5"
d G "T0_DIV_128" 1 91 "6"
d G "T0_DIV_256" 1 92 "7"
d G "T0_8_BIT" 1 95 "0"
d G "RTCC_INTERNAL" 1 97 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 98 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 99 "48"
d G "RTCC_DIV_1" 1 100 "8"
d G "RTCC_DIV_2" 1 101 "0"
d G "RTCC_DIV_4" 1 102 "1"
d G "RTCC_DIV_8" 1 103 "2"
d G "RTCC_DIV_16" 1 104 "3"
d G "RTCC_DIV_32" 1 105 "4"
d G "RTCC_DIV_64" 1 106 "5"
d G "RTCC_DIV_128" 1 107 "6"
d G "RTCC_DIV_256" 1 108 "7"
d G "RTCC_8_BIT" 1 109 "0"
d G "WDT_18MS" 1 121 "8"
d G "WDT_36MS" 1 122 "9"
d G "WDT_72MS" 1 123 "10"
d G "WDT_144MS" 1 124 "11"
d G "WDT_288MS" 1 125 "12"
d G "WDT_576MS" 1 126 "13"
d G "WDT_1152MS" 1 127 "14"
d G "WDT_2304MS" 1 128 "15"
d G "WDT_ON" 1 132 "0x4000"
d G "WDT_OFF" 1 133 "0"
d G "WDT_DIV_16" 1 134 "0x100"
d G "WDT_DIV_8" 1 135 "0x300"
d G "WDT_DIV_4" 1 136 "0x500"
d G "WDT_DIV_2" 1 137 "0x700"
d G "WDT_TIMES_1" 1 138 "0x900" "Default"
d G "WDT_TIMES_2" 1 139 "0xB00"
d G "WDT_TIMES_4" 1 140 "0xD00"
d G "WDT_TIMES_8" 1 141 "0xF00"
d G "WDT_TIMES_16" 1 142 "0x1100"
d G "WDT_TIMES_32" 1 143 "0x1300"
d G "WDT_TIMES_64" 1 144 "0x1500"
d G "WDT_TIMES_128" 1 145 "0x1700"
d G "T1_DISABLED" 1 151 "0"
d G "T1_INTERNAL" 1 152 "5"
d G "T1_EXTERNAL" 1 153 "7"
d G "T1_EXTERNAL_SYNC" 1 154 "3"
d G "T1_CLK_OUT" 1 156 "8"
d G "T1_DIV_BY_1" 1 158 "0"
d G "T1_DIV_BY_2" 1 159 "0x10"
d G "T1_DIV_BY_4" 1 160 "0x20"
d G "T1_DIV_BY_8" 1 161 "0x30"
d G "T1_GATE" 1 163 "0x40"
d G "T1_GATE_INVERTED" 1 164 "0xC0"
d G "T2_DISABLED" 1 169 "0"
d G "T2_DIV_BY_1" 1 170 "4"
d G "T2_DIV_BY_4" 1 171 "5"
d G "T2_DIV_BY_16" 1 172 "6"
d G "CCP_OFF" 1 178 "0"
d G "CCP_CAPTURE_FE" 1 179 "4"
d G "CCP_CAPTURE_RE" 1 180 "5"
d G "CCP_CAPTURE_DIV_4" 1 181 "6"
d G "CCP_CAPTURE_DIV_16" 1 182 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 183 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 184 "9"
d G "CCP_COMPARE_INT" 1 185 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 186 "0xB"
d G "CCP_PWM" 1 187 "0xC"
d G "CCP_PWM_PLUS_1" 1 188 "0x1c"
d G "CCP_PWM_PLUS_2" 1 189 "0x2c"
d G "CCP_PWM_PLUS_3" 1 190 "0x3c"
d G "CCP_PWM_H_H" 1 195 "0x0c"
d G "CCP_PWM_H_L" 1 196 "0x0d"
d G "CCP_PWM_L_H" 1 197 "0x0e"
d G "CCP_PWM_L_L" 1 198 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 200 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 201 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 202 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 204 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 205 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 206 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 207 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 208 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 209 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 210 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 212 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 213 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 214 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 216 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 217 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 218 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 220 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 222 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 223 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 224 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 225 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 226 "0x10000000"
d G "SPI_DISABLED" 1 234 "0x00"
d G "SPI_MASTER" 1 235 "0x20"
d G "SPI_SLAVE" 1 236 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 237 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 238 "0x00"
d G "SPI_CLK_DIV_4" 1 239 "0x00"
d G "SPI_CLK_DIV_16" 1 240 "0x01"
d G "SPI_CLK_DIV_64" 1 241 "0x02"
d G "SPI_CLK_T2" 1 242 "0x03"
d G "SPI_SS_DISABLED" 1 243 "0x01"
d G "SPI_XMIT_L_TO_H" 1 245 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 246 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 248 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 249 "0x8000"
d G "SPI_L_TO_H" 1 252 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 253 "SPI_SCK_IDLE_HIGH"
d G "UART_ADDRESS" 1 259 "2"
d G "UART_DATA" 1 260 "4"
d G "UART_AUTODETECT" 1 261 "8"
d G "UART_AUTODETECT_NOWAIT" 1 262 "9"
d G "UART_WAKEUP_ON_RDA" 1 263 "10"
d G "UART_SEND_BREAK" 1 264 "13"
d G "NC_NC_NC_NC" 1 270 "0x00"
d G "NC_NC" 1 271 "0x00"
d G "CP1_A0_A3" 1 274 "0x00090080"
d G "CP1_A1_A3" 1 275 "0x000A0081"
d G "CP1_B3_A3" 1 276 "0x00880082"
d G "CP1_B1_A3" 1 277 "0x00280083"
d G "CP1_A0_VREF" 1 278 "0x00010084"
d G "CP1_A1_VREF" 1 279 "0x00020085"
d G "CP1_B3_VREF" 1 280 "0x00800086"
d G "CP1_B1_VREF" 1 281 "0x00200087"
d G "CP1_OUT_ON_A4" 1 283 "0x00000020"
d G "CP1_INVERT" 1 284 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 1 285 "0x20000000"
d G "CP2_A0_A2" 1 288 "0x00058000"
d G "CP2_A1_A2" 1 289 "0x00068100"
d G "CP2_B3_A2" 1 290 "0x00848200"
d G "CP2_B1_A2" 1 291 "0x00248300"
d G "CP2_A0_VREF" 1 292 "0x00018400"
d G "CP2_A1_VREF" 1 293 "0x00028500"
d G "CP2_B3_VREF" 1 294 "0x00808600"
d G "CP2_B1_VREF" 1 295 "0x00208700"
d G "CP2_OUT_ON_A5" 1 297 "0x00002000"
d G "CP2_INVERT" 1 298 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 1 299 "0x10000000"
d G "CP2_T1_SYNC" 1 302 "0x01000000"
d G "CP2_T1_GATE" 1 303 "0x02000000"
d G "VREF_LOW" 1 312 "0xa0"
d G "VREF_HIGH" 1 313 "0x80"
d G "OSC_31KHZ" 1 319 "1"
d G "OSC_125KHZ" 1 320 "0x11"
d G "OSC_250KHZ" 1 321 "0x21"
d G "OSC_500KHZ" 1 322 "0x31"
d G "OSC_1MHZ" 1 323 "0x41"
d G "OSC_2MHZ" 1 324 "0x51"
d G "OSC_4MHZ" 1 325 "0x61"
d G "OSC_8MHZ" 1 326 "0x71"
d G "OSC_INTRC" 1 327 "1"
d G "OSC_NORMAL" 1 328 "0"
d G "OSC_STATE_STABLE" 1 330 "4"
d G "OSC_31KHZ_STABLE" 1 331 "2"
d G "ADC_OFF" 1 339 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 340 "0x100"
d G "ADC_CLOCK_DIV_8" 1 341 "0x40"
d G "ADC_CLOCK_DIV_32" 1 342 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 343 "0xc0" "Internal 2-6us"
d G "sAN0" 1 349 "1" "| A0"
d G "sAN1" 1 350 "2" "| A1"
d G "sAN2" 1 351 "4" "| A2"
d G "sAN3" 1 352 "8" "| A3"
d G "sAN4" 1 353 "16" "| A5"
d G "sAN5" 1 354 "32" "| E0"
d G "sAN6" 1 355 "64" "| E1"
d G "sAN7" 1 356 "128" "| E2"
d G "sAN8" 1 357 "0x10000" "| B2"
d G "sAN9" 1 358 "0x20000" "| B3"
d G "sAN10" 1 359 "0x40000" "| B1"
d G "sAN11" 1 360 "0x80000" "| B4"
d G "sAN12" 1 361 "0x100000" "| B0"
d G "sAN13" 1 362 "0x200000" "| B5"
d G "NO_ANALOGS" 1 363 "0" "None"
d G "ALL_ANALOG" 1 364 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 367 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 368 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 1 369 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 1 370 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 373 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 374 "1"
d G "ADC_READ_ONLY" 1 375 "6"
d G "L_TO_H" 1 383 "0x40"
d G "H_TO_L" 1 384 "0"
d G "GLOBAL" 1 386 "0x0BC0"
d G "PERIPH" 1 387 "0x0B40"
d G "INT_RTCC" 1 388 "0x000B20"
d G "INT_RB" 1 389 "0x01FF0B08"
d G "INT_EXT_L2H" 1 390 "0x50000B10"
d G "INT_EXT_H2L" 1 391 "0x60000B10"
d G "INT_EXT" 1 392 "0x000B10"
d G "INT_AD" 1 393 "0x008C40"
d G "INT_TBE" 1 394 "0x008C10"
d G "INT_RDA" 1 395 "0x008C20"
d G "INT_TIMER1" 1 396 "0x008C01"
d G "INT_TIMER2" 1 397 "0x008C02"
d G "INT_CCP1" 1 398 "0x008C04"
d G "INT_CCP2" 1 399 "0x008D01"
d G "INT_SSP" 1 400 "0x008C08"
d G "INT_BUSCOL" 1 401 "0x008D08"
d G "INT_EEPROM" 1 402 "0x008D10"
d G "INT_TIMER0" 1 403 "0x000B20"
d G "INT_OSC_FAIL" 1 404 "0x008D80"
d G "INT_COMP" 1 405 "0x008D20"
d G "INT_COMP2" 1 406 "0x008D40"
d G "INT_ULPWU" 1 407 "0x008D04"
d G "INT_RB0" 1 408 "0x0010B08"
d G "INT_RB1" 1 409 "0x0020B08"
d G "INT_RB2" 1 410 "0x0040B08"
d G "INT_RB3" 1 411 "0x0080B08"
d G "INT_RB4" 1 412 "0x0100B08"
d G "INT_RB5" 1 413 "0x0200B08"
d G "INT_RB6" 1 414 "0x0400B08"
d G "INT_RB7" 1 415 "0x0800B08"
D G "I2C_ADDRESS" 0 52 "0xB4"
D G "PIN_EN" 0 54 "PIN_C7" "Enable signal"
D G "PIN_RS" 0 55 "PIN_C5" "register selection (H=data register, L=instruction register)"
D G "PIN_RW" 0 56 "PIN_C6" "Read/Write selection (H=Read, L=Write)"
D G "T1_COUNTER" 0 59 "54000"
D G "DISPLAY_CMD_PING" 0 63 "1"
D G "DISPLAY_VALUE" 0 64 "2"
D G "DISPLAY_SHORT_TEXT" 0 65 "3" "shows a 4 letter text. This is here to provide compatibility with the 7-segment display"
D G "DISPLAY_UPDATE_SENSORS" 0 66 "4"
D G "DISPLAY_LONG_TEXT" 0 67 "5"
D G "CLEAR" 0 70 "6"
D G "GETPOS" 0 71 "7"
D G "SETPOS" 0 72 "8"
D G "HIDECUR" 0 73 "9"
D G "SHOWCUR" 0 74 "10"
D G "NOOP" 0 76 "99"
D G "WAIT_ADDRESS" 0 79 "0"
D G "WAIT_CMD" 0 80 "1"
D G "WAIT_POSITION" 0 81 "2"
D G "WAIT_CHARACTOR" 0 82 "3"
D G "SEND_POSITION" 0 83 "4"
D G "WAIT_VALUE_HIGH_BYTE" 0 84 "5"
D G "WAIT_VALUE_LOW_BYTE" 0 85 "6"
D G "READY_FOR_SENSOR_HI" 0 86 "7"
D G "READY_FOR_SENSOR_LOW" 0 87 "8"
D G "WAIT_SHORT_TEXT1" 0 88 "9"
D G "WAIT_SHORT_TEXT2" 0 89 "10"
D G "WAIT_SHORT_TEXT3" 0 90 "11"
D G "WAIT_SHORT_TEXT4" 0 91 "12"
D G "ERR_UNKNOWN_COMMAND" 0 94 "0" "unknown I2C command"
D G "ERR_UNKNOWN_STATE" 0 95 "1" "unknown I2C state"
D G "ERR_WRONG_STATE" 0 96 "2" "wrong I2C idle state (i2c reset will tak place)"
D G "_STDLIB" 2 12 ""
D G "RAND_MAX" 2 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 25 "1"
T G "div_t" 2 33 "{sint8 quot,sint8 rem}"
T G "ldiv_t" 2 38 "{sint16 quot,sint16 rem}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 2 43 2 "FUNCTION"
C L "atoi" 2 46 1 "*"
C L "atoi" 2 46 1 "*"
V L "s" 2 50 "*int8"
F G "atoi" 2 50 "sint8(*int8 s)" "Syntax: signed int32  atoi32(char * s)"
V L "s" 2 58 "*int8"
F G "atoi32" 2 58 "sint32(*int8 s)"
C L "atoi32" 2 46 3 "FUNCTION"
V L "num" 2 79 "sint32"
V L "base" 2 79 "int8"
V L "s" 2 79 "*int8"
F G "itoa" 2 79 "*int8(sint32 num,int8 base,*int8 s)" "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 81 1 "*"
C L "itoa" 2 81 1 "*"
V L "s" 2 85 "*int8"
F G "atol" 2 85 "sint16(*int8 s)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
V L "s" 2 93 "*int8"
V L "endptr" 2 93 "*int8"
V L "base" 2 93 "sint8"
F G "strtol" 2 93 "sint16(*int8 s,*int8 endptr,sint8 base)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
V L "s" 2 101 "*int8"
V L "endptr" 2 101 "*int8"
V L "base" 2 101 "sint8"
F G "strtoul" 2 101 "int16(*int8 s,*int8 endptr,sint8 base)" "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 95 2 "FUNCTION"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
V L "s" 2 110 "*int8"
V L "endptr" 2 110 "*int8"
F G "strtof" 2 110 "float(*int8 s,*int8 endptr)"
D G "strtof48" 2 116 "(s, e) strtof(s, e)"
D G "strtod" 2 117 "(s, e) strtof(s, e)"
C L "strtof" 2 103 1 "FUNCTION"
C L "strtof" 2 120 1 "*"
D G "atof" 2 124 "(s)   strtof(s, 0)"
C L "strtof" 2 120 1 "FUNCTION"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
C L "strtof" 2 143 1 "*"
V L "s" 2 149 "*int8"
F G "atoe" 2 149 "float(*int8 s)"
C L "atoe" 2 143 2 "FUNCTION"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
F G "rand" 2 169 "int16()" "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
V L "seed" 2 191 "int32"
F G "srand" 2 191 "void(int32 seed)" "Memory management functions"
C L "srand" 2 171 3 "FUNCTION"
V L "string" 2 205 "*int8"
F G "system" 2 205 "sint8(*int8 string)" "Searching and sorting utilities"
C L "system" 2 171 1 "FUNCTION"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 4 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
D G "labs" 2 249 "abs"
V L "numer" 2 251 "sint8"
V L "denom" 2 251 "sint8"
F G "div" 2 251 "div_t(sint8 numer,sint8 denom)"
V L "numer" 2 252 "sint16"
V L "denom" 2 252 "sint16"
F G "ldiv" 2 252 "ldiv_t(sint16 numer,sint16 denom)" "Multibyte character functions"
C L "ldiv" 2 229 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
V L "s1" 4 34 "*int8"
V L "s2" 4 34 "*int8"
V L "n" 4 34 "int16"
F G "memmove" 4 34 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "sc1" 4 36 "*int8"
V L "sc2" 4 37 "*int8"
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
V L "s1" 4 61 "*int8"
V L "s2" 4 61 "*int8"
V L "n" 4 61 "int16"
F G "strncpy" 4 61 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 63 "*int8"
C L "strcat" 4 19 3 "FUNCTION"
V L "s1" 4 78 "*int8"
V L "s2" 4 78 "*int8"
F G "strcat" 4 78 "*int8(*int8 s1,*int8 s2)"
V L "s" 4 80 "*int8"
C L "strncat" 4 19 2 "FUNCTION"
V L "s1" 4 96 "*int8"
V L "s2" 4 96 "*int8"
V L "n" 4 96 "int16"
F G "strncat" 4 96 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 98 "*int8"
C L "memcmp" 4 19 3 "FUNCTION"
V L "s1" 4 120 "*int8"
V L "s2" 4 120 "*int8"
V L "n" 4 120 "int16"
F G "memcmp" 4 120 "sint8(*int8 s1,*int8 s2,int16 n)"
V L "su1" 4 122 "*int8"
V L "su2" 4 122 "*int8"
C L "strcmp" 4 19 2 "FUNCTION"
V L "s1" 4 134 "*int8"
V L "s2" 4 134 "*int8"
F G "strcmp" 4 134 "sint8(*int8 s1,*int8 s2)"
C L "strcoll" 4 19 2 "FUNCTION"
V L "s1" 4 144 "*int8"
V L "s2" 4 144 "*int8"
F G "strcoll" 4 144 "sint8(*int8 s1,*int8 s2)"
C L "strncmp" 4 19 4 "FUNCTION"
V L "s1" 4 157 "*int8"
V L "s2" 4 157 "*int8"
V L "n" 4 157 "int16"
F G "strncmp" 4 157 "sint8(*int8 s1,*int8 s2,int16 n)"
C L "strxfrm" 4 19 3 "FUNCTION"
V L "s1" 4 169 "*int8"
V L "s2" 4 169 "*int8"
V L "n" 4 169 "int16"
F G "strxfrm" 4 169 "int16(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 171 "*int8"
V L "n1" 4 172 "int8"
C L "memchr" 4 19 3 "FUNCTION"
V L "s" 4 191 "*int8"
V L "c" 4 191 "int8"
V L "n" 4 191 "int16"
F G "memchr" 4 191 "*int8(*int8 s,int8 c,int16 n)"
V L "uc" 4 193 "int8"
V L "su" 4 194 "*int8"
C L "strchr" 4 19 2 "FUNCTION"
V L "s" 4 205 "*int8"
V L "c" 4 205 "int8"
F G "strchr" 4 205 "*int8(*int8 s,int8 c)"
C L "strcspn" 4 19 4 "FUNCTION"
V L "s1" 4 217 "*int8"
V L "s2" 4 217 "*int8"
F G "strcspn" 4 217 "int8(*int8 s1,*int8 s2)"
V L "sc1" 4 219 "*int8"
V L "sc2" 4 219 "*int8"
C L "strpbrk" 4 19 4 "FUNCTION"
V L "s1" 4 232 "*int8"
V L "s2" 4 232 "*int8"
F G "strpbrk" 4 232 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 4 234 "*int8"
V L "sc2" 4 234 "*int8"
C L "strrchr" 4 19 2 "FUNCTION"
V L "s" 4 247 "*int8"
V L "c" 4 247 "int8"
F G "strrchr" 4 247 "*int8(*int8 s,int8 c)"
V L "p" 4 249 "*int8"
C L "strspn" 4 19 2 "FUNCTION"
V L "s1" 4 262 "*int8"
V L "s2" 4 262 "*int8"
F G "strspn" 4 262 "int8(*int8 s1,*int8 s2)"
V L "sc1" 4 264 "*int8"
V L "sc2" 4 264 "*int8"
C L "strstr" 4 19 6 "FUNCTION"
V L "s1" 4 281 "*int8"
V L "s2" 4 281 "*int8"
F G "strstr" 4 281 "*int8(*int8 s1,*int8 s2)"
V L "s" 4 283 "*int8"
V L "t" 4 283 "*int8"
C L "strtok" 4 19 13 "FUNCTION"
V L "s1" 4 320 "*int8"
V L "s2" 4 320 "*int8"
F G "strtok" 4 320 "*int8(*int8 s1,*int8 s2)"
V L "beg" 4 322 "*int8"
V L "end" 4 322 "*int8"
V L "save" 4 323 "*int8"
C L "strlen" 4 19 6 "FUNCTION"
V L "s" 4 369 "*int8"
F G "strlen" 4 369 "int8(*int8 s)"
V L "sc" 4 371 "*int8"
C L "stricmp" 4 19 2 "FUNCTION"
V L "s1" 4 380 "*int8"
V L "s2" 4 380 "*int8"
F G "stricmp" 4 380 "sint8(*int8 s1,*int8 s2)"
C L "strlwr" 4 19 3 "FUNCTION"
V L "s" 4 394 "*int8"
F G "strlwr" 4 394 "*int8(*int8 s)"
V L "p" 4 396 "*int8"
C L "strupr" 4 19 3 "FUNCTION"
V L "s" 4 408 "*int8"
F G "strupr" 4 408 "*int8(*int8 s)"
V L "p" 4 410 "*int8"
V L "numer" 2 274 "sint8"
V L "denom" 2 274 "sint8"
F G "div" 2 274 "div_t(sint8 numer,sint8 denom,sint8 )"
V L "val" 2 276 "div_t"
V L "numer" 2 282 "sint16"
V L "denom" 2 282 "sint16"
F G "ldiv" 2 282 "ldiv_t(sint16 numer,sint16 denom,sint16 )"
V L "val" 2 284 "ldiv_t"
V L "s" 2 361 "*int8"
F G "atoe" 2 361 "float(*int8 s)"
V L "pow10" 2 363 "float"
V L "result" 2 364 "float"
V L "sign" 2 365 "int8"
V L "expsign" 2 366 "int8"
V L "c" 2 367 "int8"
V L "ptr" 2 368 "int8"
V L "i" 2 369 "int8"
V L "exp" 2 370 "float"
V L "expcnt" 2 371 "int8"
C L "atoe" 2 397 1 "FUNCTION"
V L "s" 2 429 "*int8"
F G "atoi" 2 429 "sint8(*int8 s)"
V L "result" 2 431 "sint8"
V L "sign" 2 432 "int8"
V L "base" 2 432 "int8"
V L "index" 2 432 "int8"
V L "c" 2 433 "int8"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
C L "atoi" 2 397 1 "FUNCTION"
V L "s" 2 498 "*int8"
F G "atol" 2 498 "sint16(*int8 s)"
V L "result" 2 500 "sint16"
V L "sign" 2 501 "int8"
V L "base" 2 501 "int8"
V L "index" 2 501 "int8"
V L "c" 2 502 "int8"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "atol" 2 397 1 "FUNCTION"
C L "mult_with10" 2 397 1 "FUNCTION"
V L "num" 2 565 "int32"
F G "mult_with10" 2 565 "sint32(int32 num)"
V L "s" 2 571 "*int8"
F G "atoi32" 2 571 "sint32(*int8 s)"
V L "result" 2 573 "sint32"
V L "sign" 2 574 "int8"
V L "base" 2 574 "int8"
V L "index" 2 574 "int8"
V L "c" 2 575 "int8"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
C L "atoi32" 2 397 1 "FUNCTION"
V L "num" 2 770 "sint32"
V L "base" 2 770 "int8"
V L "s" 2 770 "*int8"
F G "itoa" 2 770 "*int8(sint32 num,int8 base,*int8 s)"
V L "temp" 2 772 "int32"
V L "i" 2 773 "int8"
V L "sign" 2 773 "int8"
V L "cnt" 2 773 "int8"
V L "c" 2 774 "int8"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
C L "itoa" 2 397 1 "FUNCTION"
V L "s" 2 885 "*int8"
V L "endptr" 2 885 "*int8"
F G "strtof" 2 885 "float(*int8 s,*int8 endptr)"
V L "pow10" 2 887 "float"
V L "result" 2 888 "float"
V L "skip" 2 889 "int1"
V L "sign" 2 889 "int1"
V L "point" 2 889 "int1"
V L "c" 2 890 "int8"
V L "ptr" 2 891 "int8"
V L "s" 2 1103 "*int8"
V L "endptr" 2 1103 "*int8"
V L "base" 2 1103 "sint8"
F G "strtoul" 2 1103 "int16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 2 1105 "*int8"
V L "s1" 2 1105 "*int8"
V L "sd" 2 1105 "*int8"
V L "x" 2 1106 "int16"
V L "sign" 2 1107 "int8"
V L "digits" 2 1108 "int8[1]"
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
C L "strtoul" 2 397 1 "FUNCTION"
V L "s" 2 1165 "*int8"
V L "endptr" 2 1165 "*int8"
V L "base" 2 1165 "sint8"
F G "strtol" 2 1165 "sint16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 2 1167 "*int8"
V L "s1" 2 1167 "*int8"
V L "sd" 2 1167 "*int8"
V L "x" 2 1168 "sint16"
V L "sign" 2 1169 "int8"
V L "digits" 2 1170 "int8[1]"
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
C L "strtol" 2 397 1 "FUNCTION"
V L "string" 2 1228 "*int8"
F G "system" 2 1228 "sint8(*int8 string,int16 n)"
V L "s" 2 1233 "*int8"
V L "n" 2 1233 "int16"
F G "mblen" 2 1233 "int8(*int8 s,int16 n)"
V L "pwc" 2 1238 "*int8"
V L "s" 2 1238 "*int8"
V L "n" 2 1238 "int16"
F G "mbtowc" 2 1238 "int8(*int8 pwc,*int8 s,int16 n)"
V L "s" 2 1244 "*int8"
V L "wchar" 2 1244 "int8"
F G "wctomb" 2 1244 "int8(*int8 s,int8 wchar)"
V L "pwcs" 2 1250 "*int8"
V L "s" 2 1250 "*int8"
V L "n" 2 1250 "int16"
F G "mbstowcs" 2 1250 "int16(*int8 pwcs,*int8 s,int16 n)"
V L "s" 2 1256 "*int8"
V L "pwcs" 2 1256 "*int8"
V L "n" 2 1256 "int16"
F G "wcstombs" 2 1256 "int16(*int8 s,*int8 pwcs,int16 n)"
V G "_Randseed" 2 1266 "int32"
F G "rand" 2 1268 "int16(int16 ,int16 )"
V L "seed" 2 1274 "int32"
F G "srand" 2 1274 "void(int32 seed,*int8 p2)"
V L "p1" 2 1284 "*int8"
V L "p2" 2 1284 "*int8"
T G "*_Cmpfun" 2 1284 "sint8(*int8 p1,*int8 p2)"
V L "qdata" 2 1291 "*int8"
V L "qitems" 2 1291 "int8"
V L "qsize" 2 1291 "int8"
V L "cmp" 2 1291 "_Cmpfun"
F G "qsort" 2 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)"
V L "m" 2 1292 "int8"
V L "j" 2 1292 "int8"
V L "i" 2 1292 "int8"
V L "l" 2 1292 "int8"
V L "done" 2 1293 "int1"
V L "t" 2 1294 "int8[16]"
V L "key" 2 1319 "*int8"
V L "base" 2 1319 "*int8"
V L "num" 2 1319 "int16"
V L "width" 2 1319 "int16"
V L "cmp" 2 1319 "_Cmpfun"
F G "bsearch" 2 1319 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)"
V L "p" 2 1321 "*int8"
V L "q" 2 1321 "*int8"
V L "n" 2 1322 "int16"
V L "pivot" 2 1323 "int16"
V L "val" 2 1324 "sint8"
C L "bsearch" 2 397 1 "FUNCTION"
D G "MCP3208_CLK" 6 34 "PIN_A5"
D G "MCP3208_DOUT" 6 35 "PIN_C0"
D G "MCP3208_DIN" 6 36 "PIN_C1"
D G "MCP3208_CS" 6 37 "PIN_C2"
C L "adc_init" 6 1 1 "FUNCTION"
F G "adc_init" 6 43 "void()"
V L "data_byte" 6 48 "int8"
V L "number_of_bits" 6 48 "int8"
F G "write_adc_byte" 6 48 "void(int8 data_byte,int8 number_of_bits)"
V L "i" 6 49 "int8"
V L "number_of_bits" 6 66 "int8"
F G "read_adc_byte" 6 66 "int8(int8 number_of_bits)"
V L "i" 6 67 "int8"
V L "data" 6 67 "int8"
V L "channel" 6 81 "int8"
V L "mode" 6 81 "int8"
F G "read_analog_mcp" 6 81 "int16(int8 channel,int8 mode)"
V L "l" 6 82 "int8"
V L "h" 6 83 "int16"
V L "ctrl_bits" 6 84 "int8"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
C L "read_analog_mcp" 6 1 1 "FUNCTION"
V L "channel" 6 127 "int8"
F G "read_analog" 6 127 "int16(int8 channel)" "Auto specifies single mode"
V L "data" 6 133 "int16"
V L "volts" 6 133 "*"
F G "convert_to_volts" 6 133 "void(int16 data,* volts)"
V L "i" 6 134 "int8"
V L "d" 6 134 "int8"
V L "div_h" 6 134 "int8"
V L "div_l" 6 134 "int8"
V L "temp" 6 135 "int16"
V L "div" 6 135 "int16"
C L "resetI2C" 0 110 1 "FUNCTION"
F G "resetI2C" 0 113 "void()"
F G "submit" 0 114 "void()"
V L "code" 0 115 "int8"
F G "type" 0 115 "void(int8 code)"
F G "fillBlankSensorsWithDefaultValue" 0 116 "void()"
F G "triggerScreenUpdate" 0 117 "void()"
F G "clearScreen" 0 118 "void()"
F G "showCursor" 0 119 "void()"
F G "hideCursor" 0 120 "void()"
F G "twoDisplay" 0 121 "void()"
V L "pos" 0 122 "int8"
F G "setPosition" 0 122 "void(int8 pos)"
F G "getPosition" 0 123 "int8()"
V L "errCode" 0 124 "int8"
V L "data" 0 124 "int8"
F G "showError" 0 124 "void(int8 errCode,int8 data)"
F G "init" 0 125 "void()"
F G "updateScreen" 0 126 "void()"
F G "MAIN" 0 127 "void()" "static int setCursor =0;"
V G "inputCursor" 0 130 "int8"
C L "MAIN" 0 110 2 "FUNCTION"
V G "slaveState" 0 135 "int8"
C L "MAIN" 0 110 1 "FUNCTION"
V G "input" 0 136 "int8"
V G "cmd" 0 137 "int8"
V G "gblDisplayBufferIndex" 0 138 "int8"
V G "gblDisplayModuleCursorPos" 0 139 "int8"
V G "gblTimeToUpdateScreen" 0 140 "int1"
C L "MAIN" 0 110 1 "FUNCTION"
V G "curText" 0 142 "int8[33]"
V G "gblNewLCDPos" 0 143 "int8"
V G "gblDisplayValue" 0 145 "int16"
V G "valueBuffer" 0 146 "int8[6]"
C L "MAIN" 0 110 2 "FUNCTION"
V G "gblSensorBufferHi" 0 149 "int8"
V G "gblSensorBufferLow" 0 150 "int8"
V G "gblSensorValues" 0 151 "int16[8]"
V G "gblSensorTimeout" 0 153 "int8"
V G "gblUpdatedSensors" 0 154 "int8"
C L "MAIN" 0 110 1 "FUNCTION"
V G "gblLastSensorReceived" 0 155 "int8" "logs the latest sensor port number received"
V G "gblDirtyBits" 0 157 "int32"
C L "MAIN" 0 110 2 "FUNCTION"
V G "tenThousands" 0 160 "int8"
V G "thousands" 0 161 "int8"
V G "hundreds" 0 162 "int8"
V G "tens" 0 163 "int8"
V G "ones" 0 164 "int8"
F G "ssp_interrupt" 0 169 "void()"
V L "i" 0 171 "int8"
V L "i2cState" 0 172 "int8"
V L "sensorPort" 0 174 "int8" "disable_interrupts(GLOBAL);"
C L "ssp_interrupt" 0 110 11 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 3 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 3 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 5 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 3 "FUNCTION"
C L "ssp_interrupt" 0 110 4 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "ssp_interrupt" 0 110 1 "FUNCTION"
C L "ssp_interrupt" 0 110 2 "FUNCTION"
C L "timer1_isr" 0 110 1 "FUNCTION"
F G "timer1_isr" 0 455 "void()"
C L "timer1_isr" 0 110 1 "FUNCTION"
F G "triggerScreenUpdate" 0 463 "void()" "may need to set a flag so that we don't re-trigger while"
C L "triggerScreenUpdate" 0 110 1 "FUNCTION"
C L "triggerScreenUpdate" 0 110 1 "FUNCTION"
F G "resetI2C" 0 473 "void()" "clear the error flag registers and re-enable the i2c bus"
C L "resetI2C" 0 110 1 "FUNCTION"
C L "resetI2C" 0 110 1 "FUNCTION"
C L "resetI2C" 0 110 1 "FUNCTION"
C L "resetI2C" 0 110 1 "FUNCTION"
F G "submit" 0 483 "void()"
V L "text" 0 490 "int8"
F G "type" 0 490 "void(int8 text)" "convert a charactor to ascii"
C L "type" 0 110 1 "FUNCTION"
C L "type" 0 110 8 "FUNCTION"
C L "fillBlankSensorsWithDefaultValue" 0 110 1 "FUNCTION"
F G "fillBlankSensorsWithDefaultValue" 0 511 "void(int8 text)"
V L "i" 0 512 "int8"
C L "fillBlankSensorsWithDefaultValue" 0 110 2 "FUNCTION"
F G "clearScreen" 0 526 "void()"
C L "clearScreen" 0 110 1 "FUNCTION"
V L "errCode" 0 533 "int8"
V L "data" 0 533 "int8"
F G "showError" 0 533 "void(int8 errCode,int8 data)"
C L "showError" 0 110 1 "FUNCTION"
C L "showError" 0 110 1 "FUNCTION"
F G "showCursor" 0 545 "void(int16 val_adc,int8 line,int8 ch)"
F G "hideCursor" 0 551 "void(int16 val_adc,int8 line,int8 ch)"
V L "pos" 0 558 "int8"
F G "setPosition" 0 558 "void(int8 pos,int8 line,int8 ch)"
C L "setPosition" 0 110 1 "FUNCTION"
F G "getPosition" 0 565 "int8(int8 pos,int8 line,int8 ch)"
F G "twoDisplay" 0 569 "void(int8 pos,int8 line,int8 ch)"
F G "init" 0 574 "void(int8 pos,int8 line,int8 ch)"
C L "init" 0 110 1 "FUNCTION"
C L "init" 0 110 21 "FUNCTION"
C L "init" 0 110 1 "FUNCTION"
C L "updateScreen" 0 110 1 "FUNCTION"
F G "updateScreen" 0 630 "void(int8 pos,int8 line,int8 ch)"
C L "updateScreen" 0 110 1 "FUNCTION"
C L "updateScreen" 0 110 1 "FUNCTION"
C L "updateScreen" 0 110 2 "FUNCTION"
C L "updateScreen" 0 110 1 "FUNCTION"
C L "show_adc" 0 110 3 "FUNCTION"
V L "val_adc" 0 661 "int16"
V L "line" 0 661 "int8"
V L "ch" 0 661 "int8"
F G "show_adc" 0 661 "void(int16 val_adc,int8 line,int8 ch)"
C L "show_adc" 0 110 4 "FUNCTION"
V L "dis0" 0 710 "int8"
V L "dis1" 0 711 "int8"
V L "dis2" 0 712 "int8"
V L "dis3" 0 713 "int8"
V L "dis4" 0 714 "int8"
F G "MAIN" 0 724 "void()"
V L "val_adc" 0 725 "int16"
V L "ch" 0 726 "int8[8]"
C L "MAIN" 0 110 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 0
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_poll" 0 1
F B "delay_ms" 1 0
F B "delay_us" 1 0
